// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.1
// source: manager.proto

package cli_pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DashboardResponse_ValidatorStatus int32

const (
	DashboardResponse_Validating  DashboardResponse_ValidatorStatus = 0
	DashboardResponse_Challenger  DashboardResponse_ValidatorStatus = 1
	DashboardResponse_Offline     DashboardResponse_ValidatorStatus = 2
	DashboardResponse_NotDeclared DashboardResponse_ValidatorStatus = 3
)

// Enum value maps for DashboardResponse_ValidatorStatus.
var (
	DashboardResponse_ValidatorStatus_name = map[int32]string{
		0: "Validating",
		1: "Challenger",
		2: "Offline",
		3: "NotDeclared",
	}
	DashboardResponse_ValidatorStatus_value = map[string]int32{
		"Validating":  0,
		"Challenger":  1,
		"Offline":     2,
		"NotDeclared": 3,
	}
)

func (x DashboardResponse_ValidatorStatus) Enum() *DashboardResponse_ValidatorStatus {
	p := new(DashboardResponse_ValidatorStatus)
	*p = x
	return p
}

func (x DashboardResponse_ValidatorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardResponse_ValidatorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[0].Descriptor()
}

func (DashboardResponse_ValidatorStatus) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[0]
}

func (x DashboardResponse_ValidatorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardResponse_ValidatorStatus.Descriptor instead.
func (DashboardResponse_ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{5, 0}
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion *NodeInfo_ProtocolVersion `protobuf:"bytes,8,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	Id              string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ListenAddr      string                    `protobuf:"bytes,2,opt,name=listen_addr,json=listenAddr,proto3" json:"listen_addr,omitempty"`
	Network         string                    `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Version         string                    `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Channels        string                    `protobuf:"bytes,5,opt,name=channels,proto3" json:"channels,omitempty"`
	Moniker         string                    `protobuf:"bytes,6,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Other           *NodeInfo_Other           `protobuf:"bytes,7,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0}
}

func (x *NodeInfo) GetProtocolVersion() *NodeInfo_ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return nil
}

func (x *NodeInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeInfo) GetListenAddr() string {
	if x != nil {
		return x.ListenAddr
	}
	return ""
}

func (x *NodeInfo) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NodeInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NodeInfo) GetChannels() string {
	if x != nil {
		return x.Channels
	}
	return ""
}

func (x *NodeInfo) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

func (x *NodeInfo) GetOther() *NodeInfo_Other {
	if x != nil {
		return x.Other
	}
	return nil
}

type NetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listening bool                    `protobuf:"varint,4,opt,name=listening,proto3" json:"listening,omitempty"`
	Listeners []string                `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
	NPeers    int64                   `protobuf:"varint,2,opt,name=n_peers,json=nPeers,proto3" json:"n_peers,omitempty"`
	Peers     []*NetInfoResponse_Peer `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *NetInfoResponse) Reset() {
	*x = NetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInfoResponse) ProtoMessage() {}

func (x *NetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInfoResponse.ProtoReflect.Descriptor instead.
func (*NetInfoResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1}
}

func (x *NetInfoResponse) GetListening() bool {
	if x != nil {
		return x.Listening
	}
	return false
}

func (x *NetInfoResponse) GetListeners() []string {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *NetInfoResponse) GetNPeers() int64 {
	if x != nil {
		return x.NPeers
	}
	return 0
}

func (x *NetInfoResponse) GetPeers() []*NetInfoResponse_Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	LatestBlockHash   string `protobuf:"bytes,1,opt,name=latest_block_hash,json=latestBlockHash,proto3" json:"latest_block_hash,omitempty"`
	LatestAppHash     string `protobuf:"bytes,2,opt,name=latest_app_hash,json=latestAppHash,proto3" json:"latest_app_hash,omitempty"`
	LatestBlockHeight string `protobuf:"bytes,3,opt,name=latest_block_height,json=latestBlockHeight,proto3" json:"latest_block_height,omitempty"`
	LatestBlockTime   string `protobuf:"bytes,4,opt,name=latest_block_time,json=latestBlockTime,proto3" json:"latest_block_time,omitempty"`
	KeepLastStates    string `protobuf:"bytes,5,opt,name=keep_last_states,json=keepLastStates,proto3" json:"keep_last_states,omitempty"`
	CatchingUp        bool   `protobuf:"varint,6,opt,name=catching_up,json=catchingUp,proto3" json:"catching_up,omitempty"`
	PublicKey         string `protobuf:"bytes,7,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	NodeId            string `protobuf:"bytes,9,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{2}
}

func (x *StatusResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StatusResponse) GetLatestBlockHash() string {
	if x != nil {
		return x.LatestBlockHash
	}
	return ""
}

func (x *StatusResponse) GetLatestAppHash() string {
	if x != nil {
		return x.LatestAppHash
	}
	return ""
}

func (x *StatusResponse) GetLatestBlockHeight() string {
	if x != nil {
		return x.LatestBlockHeight
	}
	return ""
}

func (x *StatusResponse) GetLatestBlockTime() string {
	if x != nil {
		return x.LatestBlockTime
	}
	return ""
}

func (x *StatusResponse) GetKeepLastStates() string {
	if x != nil {
		return x.KeepLastStates
	}
	return ""
}

func (x *StatusResponse) GetCatchingUp() bool {
	if x != nil {
		return x.CatchingUp
	}
	return false
}

func (x *StatusResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *StatusResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type PruneBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromHeight int64 `protobuf:"varint,1,opt,name=from_height,json=fromHeight,proto3" json:"from_height,omitempty"`
	ToHeight   int64 `protobuf:"varint,2,opt,name=to_height,json=toHeight,proto3" json:"to_height,omitempty"`
}

func (x *PruneBlocksRequest) Reset() {
	*x = PruneBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PruneBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneBlocksRequest) ProtoMessage() {}

func (x *PruneBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneBlocksRequest.ProtoReflect.Descriptor instead.
func (*PruneBlocksRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{3}
}

func (x *PruneBlocksRequest) GetFromHeight() int64 {
	if x != nil {
		return x.FromHeight
	}
	return 0
}

func (x *PruneBlocksRequest) GetToHeight() int64 {
	if x != nil {
		return x.ToHeight
	}
	return 0
}

type DealPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Persistent bool   `protobuf:"varint,2,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *DealPeerRequest) Reset() {
	*x = DealPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DealPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DealPeerRequest) ProtoMessage() {}

func (x *DealPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DealPeerRequest.ProtoReflect.Descriptor instead.
func (*DealPeerRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{4}
}

func (x *DealPeerRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DealPeerRequest) GetPersistent() bool {
	if x != nil {
		return x.Persistent
	}
	return false
}

type DashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestHeight           int64                             `protobuf:"varint,1,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height,omitempty"`
	Timestamp              *timestamp.Timestamp              `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Duration               int64                             `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	MemoryUsage            uint64                            `protobuf:"varint,4,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	ValidatorPubKey        string                            `protobuf:"bytes,5,opt,name=validator_pub_key,json=validatorPubKey,proto3" json:"validator_pub_key,omitempty"`
	MaxPeerHeight          int64                             `protobuf:"varint,6,opt,name=max_peer_height,json=maxPeerHeight,proto3" json:"max_peer_height,omitempty"`
	PeersCount             int32                             `protobuf:"varint,7,opt,name=peers_count,json=peersCount,proto3" json:"peers_count,omitempty"`
	AvgBlockProcessingTime int64                             `protobuf:"varint,8,opt,name=avg_block_processing_time,json=avgBlockProcessingTime,proto3" json:"avg_block_processing_time,omitempty"`
	TimePerBlock           int64                             `protobuf:"varint,9,opt,name=time_per_block,json=timePerBlock,proto3" json:"time_per_block,omitempty"`
	MissedBlocks           string                            `protobuf:"bytes,10,opt,name=missed_blocks,json=missedBlocks,proto3" json:"missed_blocks,omitempty"`
	VotingPower            int64                             `protobuf:"varint,11,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
	Stake                  string                            `protobuf:"bytes,12,opt,name=stake,proto3" json:"stake,omitempty"`
	ValidatorStatus        DashboardResponse_ValidatorStatus `protobuf:"varint,13,opt,name=validator_status,json=validatorStatus,proto3,enum=cli_pb.DashboardResponse_ValidatorStatus" json:"validator_status,omitempty"`
}

func (x *DashboardResponse) Reset() {
	*x = DashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardResponse) ProtoMessage() {}

func (x *DashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardResponse.ProtoReflect.Descriptor instead.
func (*DashboardResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{5}
}

func (x *DashboardResponse) GetLatestHeight() int64 {
	if x != nil {
		return x.LatestHeight
	}
	return 0
}

func (x *DashboardResponse) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DashboardResponse) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DashboardResponse) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *DashboardResponse) GetValidatorPubKey() string {
	if x != nil {
		return x.ValidatorPubKey
	}
	return ""
}

func (x *DashboardResponse) GetMaxPeerHeight() int64 {
	if x != nil {
		return x.MaxPeerHeight
	}
	return 0
}

func (x *DashboardResponse) GetPeersCount() int32 {
	if x != nil {
		return x.PeersCount
	}
	return 0
}

func (x *DashboardResponse) GetAvgBlockProcessingTime() int64 {
	if x != nil {
		return x.AvgBlockProcessingTime
	}
	return 0
}

func (x *DashboardResponse) GetTimePerBlock() int64 {
	if x != nil {
		return x.TimePerBlock
	}
	return 0
}

func (x *DashboardResponse) GetMissedBlocks() string {
	if x != nil {
		return x.MissedBlocks
	}
	return ""
}

func (x *DashboardResponse) GetVotingPower() int64 {
	if x != nil {
		return x.VotingPower
	}
	return 0
}

func (x *DashboardResponse) GetStake() string {
	if x != nil {
		return x.Stake
	}
	return ""
}

func (x *DashboardResponse) GetValidatorStatus() DashboardResponse_ValidatorStatus {
	if x != nil {
		return x.ValidatorStatus
	}
	return DashboardResponse_Validating
}

type PruneBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Current int64 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *PruneBlocksResponse) Reset() {
	*x = PruneBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PruneBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneBlocksResponse) ProtoMessage() {}

func (x *PruneBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneBlocksResponse.ProtoReflect.Descriptor instead.
func (*PruneBlocksResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{6}
}

func (x *PruneBlocksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PruneBlocksResponse) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

type NodeInfo_ProtocolVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2P   uint64 `protobuf:"varint,3,opt,name=p2p,proto3" json:"p2p,omitempty"`
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
	App   uint64 `protobuf:"varint,2,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *NodeInfo_ProtocolVersion) Reset() {
	*x = NodeInfo_ProtocolVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo_ProtocolVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo_ProtocolVersion) ProtoMessage() {}

func (x *NodeInfo_ProtocolVersion) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo_ProtocolVersion.ProtoReflect.Descriptor instead.
func (*NodeInfo_ProtocolVersion) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NodeInfo_ProtocolVersion) GetP2P() uint64 {
	if x != nil {
		return x.P2P
	}
	return 0
}

func (x *NodeInfo_ProtocolVersion) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *NodeInfo_ProtocolVersion) GetApp() uint64 {
	if x != nil {
		return x.App
	}
	return 0
}

type NodeInfo_Other struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIndex    string `protobuf:"bytes,2,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	RpcAddress string `protobuf:"bytes,1,opt,name=rpc_address,json=rpcAddress,proto3" json:"rpc_address,omitempty"`
}

func (x *NodeInfo_Other) Reset() {
	*x = NodeInfo_Other{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo_Other) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo_Other) ProtoMessage() {}

func (x *NodeInfo_Other) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo_Other.ProtoReflect.Descriptor instead.
func (*NodeInfo_Other) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0, 1}
}

func (x *NodeInfo_Other) GetTxIndex() string {
	if x != nil {
		return x.TxIndex
	}
	return ""
}

func (x *NodeInfo_Other) GetRpcAddress() string {
	if x != nil {
		return x.RpcAddress
	}
	return ""
}

type NetInfoResponse_Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeInfo         *NodeInfo                              `protobuf:"bytes,4,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
	IsOutbound       bool                                   `protobuf:"varint,1,opt,name=is_outbound,json=isOutbound,proto3" json:"is_outbound,omitempty"`
	ConnectionStatus *NetInfoResponse_Peer_ConnectionStatus `protobuf:"bytes,2,opt,name=connection_status,json=connectionStatus,proto3" json:"connection_status,omitempty"`
	RemoteIp         string                                 `protobuf:"bytes,3,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
}

func (x *NetInfoResponse_Peer) Reset() {
	*x = NetInfoResponse_Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInfoResponse_Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInfoResponse_Peer) ProtoMessage() {}

func (x *NetInfoResponse_Peer) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInfoResponse_Peer.ProtoReflect.Descriptor instead.
func (*NetInfoResponse_Peer) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1, 0}
}

func (x *NetInfoResponse_Peer) GetNodeInfo() *NodeInfo {
	if x != nil {
		return x.NodeInfo
	}
	return nil
}

func (x *NetInfoResponse_Peer) GetIsOutbound() bool {
	if x != nil {
		return x.IsOutbound
	}
	return false
}

func (x *NetInfoResponse_Peer) GetConnectionStatus() *NetInfoResponse_Peer_ConnectionStatus {
	if x != nil {
		return x.ConnectionStatus
	}
	return nil
}

func (x *NetInfoResponse_Peer) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

type NetInfoResponse_Peer_ConnectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration    int64                                            `protobuf:"varint,4,opt,name=Duration,proto3" json:"Duration,omitempty"`
	SendMonitor *NetInfoResponse_Peer_ConnectionStatus_Monitor   `protobuf:"bytes,1,opt,name=SendMonitor,proto3" json:"SendMonitor,omitempty"`
	RecvMonitor *NetInfoResponse_Peer_ConnectionStatus_Monitor   `protobuf:"bytes,2,opt,name=RecvMonitor,proto3" json:"RecvMonitor,omitempty"`
	Channels    []*NetInfoResponse_Peer_ConnectionStatus_Channel `protobuf:"bytes,3,rep,name=Channels,proto3" json:"Channels,omitempty"`
}

func (x *NetInfoResponse_Peer_ConnectionStatus) Reset() {
	*x = NetInfoResponse_Peer_ConnectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInfoResponse_Peer_ConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInfoResponse_Peer_ConnectionStatus) ProtoMessage() {}

func (x *NetInfoResponse_Peer_ConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInfoResponse_Peer_ConnectionStatus.ProtoReflect.Descriptor instead.
func (*NetInfoResponse_Peer_ConnectionStatus) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *NetInfoResponse_Peer_ConnectionStatus) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus) GetSendMonitor() *NetInfoResponse_Peer_ConnectionStatus_Monitor {
	if x != nil {
		return x.SendMonitor
	}
	return nil
}

func (x *NetInfoResponse_Peer_ConnectionStatus) GetRecvMonitor() *NetInfoResponse_Peer_ConnectionStatus_Monitor {
	if x != nil {
		return x.RecvMonitor
	}
	return nil
}

func (x *NetInfoResponse_Peer_ConnectionStatus) GetChannels() []*NetInfoResponse_Peer_ConnectionStatus_Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type NetInfoResponse_Peer_ConnectionStatus_Monitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active   bool   `protobuf:"varint,13,opt,name=Active,proto3" json:"Active,omitempty"`
	Start    string `protobuf:"bytes,1,opt,name=Start,proto3" json:"Start,omitempty"`
	Duration int64  `protobuf:"varint,2,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Idle     int64  `protobuf:"varint,3,opt,name=Idle,proto3" json:"Idle,omitempty"`
	Bytes    int64  `protobuf:"varint,4,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Samples  int64  `protobuf:"varint,5,opt,name=Samples,proto3" json:"Samples,omitempty"`
	InstRate int64  `protobuf:"varint,6,opt,name=InstRate,proto3" json:"InstRate,omitempty"`
	CurRate  int64  `protobuf:"varint,7,opt,name=CurRate,proto3" json:"CurRate,omitempty"`
	AvgRate  int64  `protobuf:"varint,8,opt,name=AvgRate,proto3" json:"AvgRate,omitempty"`
	PeakRate int64  `protobuf:"varint,9,opt,name=PeakRate,proto3" json:"PeakRate,omitempty"`
	BytesRem int64  `protobuf:"varint,10,opt,name=BytesRem,proto3" json:"BytesRem,omitempty"`
	TimeRem  int64  `protobuf:"varint,11,opt,name=TimeRem,proto3" json:"TimeRem,omitempty"`
	Progress uint32 `protobuf:"varint,12,opt,name=Progress,proto3" json:"Progress,omitempty"`
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) Reset() {
	*x = NetInfoResponse_Peer_ConnectionStatus_Monitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInfoResponse_Peer_ConnectionStatus_Monitor) ProtoMessage() {}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInfoResponse_Peer_ConnectionStatus_Monitor.ProtoReflect.Descriptor instead.
func (*NetInfoResponse_Peer_ConnectionStatus_Monitor) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetIdle() int64 {
	if x != nil {
		return x.Idle
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetSamples() int64 {
	if x != nil {
		return x.Samples
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetInstRate() int64 {
	if x != nil {
		return x.InstRate
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetCurRate() int64 {
	if x != nil {
		return x.CurRate
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetAvgRate() int64 {
	if x != nil {
		return x.AvgRate
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetPeakRate() int64 {
	if x != nil {
		return x.PeakRate
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetBytesRem() int64 {
	if x != nil {
		return x.BytesRem
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetTimeRem() int64 {
	if x != nil {
		return x.TimeRem
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Monitor) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type NetInfoResponse_Peer_ConnectionStatus_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                int32 `protobuf:"varint,5,opt,name=ID,proto3" json:"ID,omitempty"`
	SendQueueCapacity int64 `protobuf:"varint,1,opt,name=SendQueueCapacity,proto3" json:"SendQueueCapacity,omitempty"`
	SendQueueSize     int64 `protobuf:"varint,2,opt,name=SendQueueSize,proto3" json:"SendQueueSize,omitempty"`
	Priority          int64 `protobuf:"varint,3,opt,name=Priority,proto3" json:"Priority,omitempty"`
	RecentlySent      int64 `protobuf:"varint,4,opt,name=RecentlySent,proto3" json:"RecentlySent,omitempty"`
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Channel) Reset() {
	*x = NetInfoResponse_Peer_ConnectionStatus_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInfoResponse_Peer_ConnectionStatus_Channel) ProtoMessage() {}

func (x *NetInfoResponse_Peer_ConnectionStatus_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInfoResponse_Peer_ConnectionStatus_Channel.ProtoReflect.Descriptor instead.
func (*NetInfoResponse_Peer_ConnectionStatus_Channel) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1, 0, 0, 1}
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Channel) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Channel) GetSendQueueCapacity() int64 {
	if x != nil {
		return x.SendQueueCapacity
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Channel) GetSendQueueSize() int64 {
	if x != nil {
		return x.SendQueueSize
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Channel) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *NetInfoResponse_Peer_ConnectionStatus_Channel) GetRecentlySent() int64 {
	if x != nil {
		return x.RecentlySent
	}
	return 0
}

var File_manager_proto protoreflect.FileDescriptor

var file_manager_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x03, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6c, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x5f,
	0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x1a, 0x4b, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x32, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x32, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x61, 0x70, 0x70, 0x1a, 0x43, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xaa, 0x09, 0x0a, 0x0f, 0x4e,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x1a, 0x8d, 0x08, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c,
	0x69, 0x5f, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x1a, 0xbb, 0x06, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x57, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x69, 0x5f, 0x70,
	0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x08,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a,
	0xd5, 0x02, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x73,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49, 0x6e, 0x73,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x75, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x75, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x76, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x41, 0x76, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x61,
	0x6b, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x65, 0x61,
	0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x53, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x53,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6b, 0x65, 0x65, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x12, 0x50, 0x72, 0x75, 0x6e, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4b, 0x0a, 0x0f, 0x44,
	0x65, 0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x05, 0x0a, 0x11, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x65, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x76, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x61, 0x76, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x54, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x69,
	0x5f, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x10, 0x03, 0x22, 0x45, 0x0a, 0x13, 0x50, 0x72, 0x75, 0x6e, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x32, 0xcf,
	0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x4e,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17,
	0x2e, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x50, 0x72, 0x75, 0x6e, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x75, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x75, 0x6e,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x3b, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x12, 0x17, 0x2e,
	0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40,
	0x0a, 0x09, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_manager_proto_rawDescOnce sync.Once
	file_manager_proto_rawDescData = file_manager_proto_rawDesc
)

func file_manager_proto_rawDescGZIP() []byte {
	file_manager_proto_rawDescOnce.Do(func() {
		file_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_manager_proto_rawDescData)
	})
	return file_manager_proto_rawDescData
}

var file_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_manager_proto_goTypes = []interface{}{
	(DashboardResponse_ValidatorStatus)(0),                // 0: cli_pb.DashboardResponse.ValidatorStatus
	(*NodeInfo)(nil),                                      // 1: cli_pb.NodeInfo
	(*NetInfoResponse)(nil),                               // 2: cli_pb.NetInfoResponse
	(*StatusResponse)(nil),                                // 3: cli_pb.StatusResponse
	(*PruneBlocksRequest)(nil),                            // 4: cli_pb.PruneBlocksRequest
	(*DealPeerRequest)(nil),                               // 5: cli_pb.DealPeerRequest
	(*DashboardResponse)(nil),                             // 6: cli_pb.DashboardResponse
	(*PruneBlocksResponse)(nil),                           // 7: cli_pb.PruneBlocksResponse
	(*NodeInfo_ProtocolVersion)(nil),                      // 8: cli_pb.NodeInfo.ProtocolVersion
	(*NodeInfo_Other)(nil),                                // 9: cli_pb.NodeInfo.Other
	(*NetInfoResponse_Peer)(nil),                          // 10: cli_pb.NetInfoResponse.Peer
	(*NetInfoResponse_Peer_ConnectionStatus)(nil),         // 11: cli_pb.NetInfoResponse.Peer.ConnectionStatus
	(*NetInfoResponse_Peer_ConnectionStatus_Monitor)(nil), // 12: cli_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor
	(*NetInfoResponse_Peer_ConnectionStatus_Channel)(nil), // 13: cli_pb.NetInfoResponse.Peer.ConnectionStatus.Channel
	(*timestamp.Timestamp)(nil),                           // 14: google.protobuf.Timestamp
	(*empty.Empty)(nil),                                   // 15: google.protobuf.Empty
}
var file_manager_proto_depIdxs = []int32{
	8,  // 0: cli_pb.NodeInfo.protocol_version:type_name -> cli_pb.NodeInfo.ProtocolVersion
	9,  // 1: cli_pb.NodeInfo.other:type_name -> cli_pb.NodeInfo.Other
	10, // 2: cli_pb.NetInfoResponse.peers:type_name -> cli_pb.NetInfoResponse.Peer
	14, // 3: cli_pb.DashboardResponse.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 4: cli_pb.DashboardResponse.validator_status:type_name -> cli_pb.DashboardResponse.ValidatorStatus
	1,  // 5: cli_pb.NetInfoResponse.Peer.node_info:type_name -> cli_pb.NodeInfo
	11, // 6: cli_pb.NetInfoResponse.Peer.connection_status:type_name -> cli_pb.NetInfoResponse.Peer.ConnectionStatus
	12, // 7: cli_pb.NetInfoResponse.Peer.ConnectionStatus.SendMonitor:type_name -> cli_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor
	12, // 8: cli_pb.NetInfoResponse.Peer.ConnectionStatus.RecvMonitor:type_name -> cli_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor
	13, // 9: cli_pb.NetInfoResponse.Peer.ConnectionStatus.Channels:type_name -> cli_pb.NetInfoResponse.Peer.ConnectionStatus.Channel
	15, // 10: cli_pb.ManagerService.Status:input_type -> google.protobuf.Empty
	15, // 11: cli_pb.ManagerService.NetInfo:input_type -> google.protobuf.Empty
	4,  // 12: cli_pb.ManagerService.PruneBlocks:input_type -> cli_pb.PruneBlocksRequest
	5,  // 13: cli_pb.ManagerService.DealPeer:input_type -> cli_pb.DealPeerRequest
	15, // 14: cli_pb.ManagerService.Dashboard:input_type -> google.protobuf.Empty
	3,  // 15: cli_pb.ManagerService.Status:output_type -> cli_pb.StatusResponse
	2,  // 16: cli_pb.ManagerService.NetInfo:output_type -> cli_pb.NetInfoResponse
	7,  // 17: cli_pb.ManagerService.PruneBlocks:output_type -> cli_pb.PruneBlocksResponse
	15, // 18: cli_pb.ManagerService.DealPeer:output_type -> google.protobuf.Empty
	6,  // 19: cli_pb.ManagerService.Dashboard:output_type -> cli_pb.DashboardResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_manager_proto_init() }
func file_manager_proto_init() {
	if File_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PruneBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DealPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PruneBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo_ProtocolVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo_Other); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInfoResponse_Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInfoResponse_Peer_ConnectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInfoResponse_Peer_ConnectionStatus_Monitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInfoResponse_Peer_ConnectionStatus_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_manager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_manager_proto_goTypes,
		DependencyIndexes: file_manager_proto_depIdxs,
		EnumInfos:         file_manager_proto_enumTypes,
		MessageInfos:      file_manager_proto_msgTypes,
	}.Build()
	File_manager_proto = out.File
	file_manager_proto_rawDesc = nil
	file_manager_proto_goTypes = nil
	file_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagerServiceClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	NetInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetInfoResponse, error)
	PruneBlocks(ctx context.Context, in *PruneBlocksRequest, opts ...grpc.CallOption) (ManagerService_PruneBlocksClient, error)
	DealPeer(ctx context.Context, in *DealPeerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Dashboard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ManagerService_DashboardClient, error)
}

type managerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerServiceClient(cc grpc.ClientConnInterface) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/cli_pb.ManagerService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) NetInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetInfoResponse, error) {
	out := new(NetInfoResponse)
	err := c.cc.Invoke(ctx, "/cli_pb.ManagerService/NetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) PruneBlocks(ctx context.Context, in *PruneBlocksRequest, opts ...grpc.CallOption) (ManagerService_PruneBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManagerService_serviceDesc.Streams[0], "/cli_pb.ManagerService/PruneBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerServicePruneBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManagerService_PruneBlocksClient interface {
	Recv() (*PruneBlocksResponse, error)
	grpc.ClientStream
}

type managerServicePruneBlocksClient struct {
	grpc.ClientStream
}

func (x *managerServicePruneBlocksClient) Recv() (*PruneBlocksResponse, error) {
	m := new(PruneBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managerServiceClient) DealPeer(ctx context.Context, in *DealPeerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cli_pb.ManagerService/DealPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Dashboard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ManagerService_DashboardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManagerService_serviceDesc.Streams[1], "/cli_pb.ManagerService/Dashboard", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerServiceDashboardClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManagerService_DashboardClient interface {
	Recv() (*DashboardResponse, error)
	grpc.ClientStream
}

type managerServiceDashboardClient struct {
	grpc.ClientStream
}

func (x *managerServiceDashboardClient) Recv() (*DashboardResponse, error) {
	m := new(DashboardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagerServiceServer is the server API for ManagerService service.
type ManagerServiceServer interface {
	Status(context.Context, *empty.Empty) (*StatusResponse, error)
	NetInfo(context.Context, *empty.Empty) (*NetInfoResponse, error)
	PruneBlocks(*PruneBlocksRequest, ManagerService_PruneBlocksServer) error
	DealPeer(context.Context, *DealPeerRequest) (*empty.Empty, error)
	Dashboard(*empty.Empty, ManagerService_DashboardServer) error
}

// UnimplementedManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedManagerServiceServer struct {
}

func (*UnimplementedManagerServiceServer) Status(context.Context, *empty.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedManagerServiceServer) NetInfo(context.Context, *empty.Empty) (*NetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetInfo not implemented")
}
func (*UnimplementedManagerServiceServer) PruneBlocks(*PruneBlocksRequest, ManagerService_PruneBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method PruneBlocks not implemented")
}
func (*UnimplementedManagerServiceServer) DealPeer(context.Context, *DealPeerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealPeer not implemented")
}
func (*UnimplementedManagerServiceServer) Dashboard(*empty.Empty, ManagerService_DashboardServer) error {
	return status.Errorf(codes.Unimplemented, "method Dashboard not implemented")
}

func RegisterManagerServiceServer(s *grpc.Server, srv ManagerServiceServer) {
	s.RegisterService(&_ManagerService_serviceDesc, srv)
}

func _ManagerService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli_pb.ManagerService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_NetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).NetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli_pb.ManagerService/NetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).NetInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_PruneBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PruneBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServiceServer).PruneBlocks(m, &managerServicePruneBlocksServer{stream})
}

type ManagerService_PruneBlocksServer interface {
	Send(*PruneBlocksResponse) error
	grpc.ServerStream
}

type managerServicePruneBlocksServer struct {
	grpc.ServerStream
}

func (x *managerServicePruneBlocksServer) Send(m *PruneBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ManagerService_DealPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DealPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli_pb.ManagerService/DealPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DealPeer(ctx, req.(*DealPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Dashboard_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServiceServer).Dashboard(m, &managerServiceDashboardServer{stream})
}

type ManagerService_DashboardServer interface {
	Send(*DashboardResponse) error
	grpc.ServerStream
}

type managerServiceDashboardServer struct {
	grpc.ServerStream
}

func (x *managerServiceDashboardServer) Send(m *DashboardResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cli_pb.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _ManagerService_Status_Handler,
		},
		{
			MethodName: "NetInfo",
			Handler:    _ManagerService_NetInfo_Handler,
		},
		{
			MethodName: "DealPeer",
			Handler:    _ManagerService_DealPeer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PruneBlocks",
			Handler:       _ManagerService_PruneBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Dashboard",
			Handler:       _ManagerService_Dashboard_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "manager.proto",
}
